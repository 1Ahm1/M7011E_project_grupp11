{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class CustomerGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'customer') {\n      return true;\n    } else {\n      // Redirect to the login page and store the original URL for redirection after login\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function CustomerGuard_Factory(t) {\n    return new (t || CustomerGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomerGuard,\n    factory: CustomerGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport class ManagerGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'manager') {\n      return true;\n    } else {\n      // Redirect to the login page and store the original URL for redirection after login\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function ManagerGuard_Factory(t) {\n    return new (t || ManagerGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ManagerGuard,\n    factory: ManagerGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport class AdminGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'admin') {\n      return true;\n    } else {\n      // Redirect to the login page and store the original URL for redirection after login\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AdminGuard_Factory(t) {\n    return new (t || AdminGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminGuard,\n    factory: AdminGuard.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport class UserGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isAuthenticated()) {\n      return true;\n    } else {\n      // Redirect to the login page and store the original URL for redirection after login\n      this.router.navigate(['/']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function UserGuard_Factory(t) {\n    return new (t || UserGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserGuard,\n    factory: UserGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CustomerGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","getRole","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn","ManagerGuard","AdminGuard","UserGuard"],"sources":["C:\\Users\\ahmad\\M7011E_project_grupp11\\library-front\\src\\app\\auth-guard.ts"],"sourcesContent":["// auth.guard.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthService } from './services/auth.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'customer') {\r\n      return true;\r\n    } else {\r\n      // Redirect to the login page and store the original URL for redirection after login\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManagerGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'manager') {\r\n      return true;\r\n    } else {\r\n      // Redirect to the login page and store the original URL for redirection after login\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isAuthenticated() && this.authService.getRole() === 'admin') {\r\n      return true;\r\n    } else {\r\n      // Redirect to the login page and store the original URL for redirection after login\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isAuthenticated()) {\r\n      return true;\r\n    } else {\r\n      // Redirect to the login page and store the original URL for redirection after login\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}