{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ahmad/M7011E_project_grupp11/library-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { BASE_URL } from 'src/utils/configs';\nimport { BookService } from './book.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.authService = inject(AuthService);\n    this.bookService = inject(BookService);\n    this.orderList = [];\n  }\n  addToCart(bookId, quantity) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const addToCartUrl = BASE_URL + 'manager/order/create/';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this.authService.getAccessToken().toString()\n      });\n      const requestBody = {\n        book_id: bookId,\n        quantity: quantity\n      };\n      let response = yield _this.http.post(addToCartUrl, requestBody, {\n        headers: headers\n      }).toPromise();\n      yield _this.authService.handleResponse(response);\n    })();\n  }\n  getOrders(purchased) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let getOrdersUrl = BASE_URL + 'manager/order/get/';\n      if (purchased) {\n        getOrdersUrl = BASE_URL + 'manager/payment/buy/get/';\n      }\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this2.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this2.http.get(getOrdersUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this2.authService.handleResponse(response);\n      _this2.orderList = [];\n      for (const order of response.result.order_list) {\n        let book = yield _this2.bookService.getBookDetails(order.book_id);\n        _this2.orderList.push({\n          id: order.order_id,\n          book: book,\n          quantity: order.quantity,\n          selected: false\n        });\n      }\n      return _this2.orderList;\n    })();\n  }\n  removeOrder(orderId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const removeOrderUrl = BASE_URL + 'manager/order/delete/' + orderId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this3.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this3.http.delete(removeOrderUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this3.authService.handleResponse(response);\n    })();\n  }\n  buyOrder(orderId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const buyOrderUrl = BASE_URL + 'manager/payment/buy/' + orderId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this4.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this4.http.post(buyOrderUrl, {}, {\n        headers: headers\n      }).toPromise();\n      yield _this4.authService.handleResponse(response);\n    })();\n  }\n  static #_ = this.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","AuthService","HttpHeaders","BASE_URL","BookService","CartService","constructor","http","authService","bookService","orderList","addToCart","bookId","quantity","_this","_asyncToGenerator","addToCartUrl","headers","getAccessToken","toString","requestBody","book_id","response","post","toPromise","handleResponse","getOrders","purchased","_this2","getOrdersUrl","get","order","result","order_list","book","getBookDetails","push","id","order_id","selected","removeOrder","orderId","_this3","removeOrderUrl","delete","buyOrder","_this4","buyOrderUrl","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ahmad\\M7011E_project_grupp11\\library-front\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Book, Order } from '../interfaces/entities';\nimport { BASE_URL } from 'src/utils/configs';\nimport { CreateOrderRequest } from '../interfaces/requests';\nimport { OrderListResponse } from '../interfaces/responses';\nimport { BookService } from './book.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  authService: AuthService = inject(AuthService);\n  bookService: BookService = inject(BookService);\n  constructor(private http: HttpClient) { }\n  orderList: Order[] = []\n\n  async addToCart(bookId: number, quantity: number): Promise<void> {\n    const addToCartUrl = BASE_URL + 'manager/order/create/';\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString()\n    });\n\n    const requestBody: CreateOrderRequest = {\n      book_id: bookId,\n      quantity: quantity\n    };\n\n    let response = await this.http.post<any>(addToCartUrl, requestBody, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n  async getOrders(purchased: boolean): Promise<Order[]> {\n    let getOrdersUrl = BASE_URL + 'manager/order/get/';\n    \n    if(purchased)\n    {\n      getOrdersUrl = BASE_URL + 'manager/payment/buy/get/';\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n\n    let response = await this.http.get<any>(getOrdersUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    this.orderList = [];\n    for(const order of response.result.order_list)\n    {\n\n      let book: Book = await this.bookService.getBookDetails(order.book_id);\n      this.orderList.push({\n        id: order.order_id,\n        book: book,\n        quantity: order.quantity,\n        selected: false\n      });\n      \n    }\n    return this.orderList;\n  }\n\n  async removeOrder(orderId: number): Promise<void> {\n    const removeOrderUrl = BASE_URL + 'manager/order/delete/' + orderId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n\n    let response = await this.http.delete<any>(removeOrderUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n\n  async buyOrder(orderId: number): Promise<void> {\n    const buyOrderUrl = BASE_URL + 'manager/payment/buy/' + orderId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n\n    \n    let response = await this.http.post<any>(buyOrderUrl, {}, { headers: headers }).toPromise();\n\n    await this.authService.handleResponse(response);\n  }\n\n\n}\n"],"mappings":";AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAAqBC,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,QAAQ,QAAQ,mBAAmB;AAG5C,SAASC,WAAW,QAAQ,gBAAgB;;;AAK5C,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,WAAW,GAAgBR,MAAM,CAACC,WAAW,CAAC;IAC9C,KAAAQ,WAAW,GAAgBT,MAAM,CAACI,WAAW,CAAC;IAE9C,KAAAM,SAAS,GAAY,EAAE;EADiB;EAGlCC,SAASA,CAACC,MAAc,EAAEC,QAAgB;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAC9C,MAAMC,YAAY,GAAGb,QAAQ,GAAG,uBAAuB;MAEvD,MAAMc,OAAO,GAAG,IAAIf,WAAW,CAAC;QAC9B,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAEY,KAAI,CAACN,WAAW,CAACU,cAAc,EAAE,CAACC,QAAQ;OACtD,CAAC;MAEF,MAAMC,WAAW,GAAuB;QACtCC,OAAO,EAAET,MAAM;QACfC,QAAQ,EAAEA;OACX;MAED,IAAIS,QAAQ,SAASR,KAAI,CAACP,IAAI,CAACgB,IAAI,CAAMP,YAAY,EAAEI,WAAW,EAAE;QAAEH,OAAO,EAAEA;MAAO,CAAE,CAAC,CAACO,SAAS,EAAE;MACrG,MAAMV,KAAI,CAACN,WAAW,CAACiB,cAAc,CAACH,QAAQ,CAAC;IAAC;EAClD;EACMI,SAASA,CAACC,SAAkB;IAAA,IAAAC,MAAA;IAAA,OAAAb,iBAAA;MAChC,IAAIc,YAAY,GAAG1B,QAAQ,GAAG,oBAAoB;MAElD,IAAGwB,SAAS,EACZ;QACEE,YAAY,GAAG1B,QAAQ,GAAG,0BAA0B;;MAEtD,MAAMc,OAAO,GAAG,IAAIf,WAAW,CAAC;QAC9B,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAE0B,MAAI,CAACpB,WAAW,CAACU,cAAc,EAAE,CAACC,QAAQ,EAAE;QACvD,MAAM,EAAE;OACT,CAAC;MAEF,IAAIG,QAAQ,SAASM,MAAI,CAACrB,IAAI,CAACuB,GAAG,CAAMD,YAAY,EAAE;QAAEZ,OAAO,EAAEA;MAAO,CAAE,CAAC,CAACO,SAAS,EAAE;MACvF,MAAMI,MAAI,CAACpB,WAAW,CAACiB,cAAc,CAACH,QAAQ,CAAC;MAC/CM,MAAI,CAAClB,SAAS,GAAG,EAAE;MACnB,KAAI,MAAMqB,KAAK,IAAIT,QAAQ,CAACU,MAAM,CAACC,UAAU,EAC7C;QAEE,IAAIC,IAAI,SAAeN,MAAI,CAACnB,WAAW,CAAC0B,cAAc,CAACJ,KAAK,CAACV,OAAO,CAAC;QACrEO,MAAI,CAAClB,SAAS,CAAC0B,IAAI,CAAC;UAClBC,EAAE,EAAEN,KAAK,CAACO,QAAQ;UAClBJ,IAAI,EAAEA,IAAI;UACVrB,QAAQ,EAAEkB,KAAK,CAAClB,QAAQ;UACxB0B,QAAQ,EAAE;SACX,CAAC;;MAGJ,OAAOX,MAAI,CAAClB,SAAS;IAAC;EACxB;EAEM8B,WAAWA,CAACC,OAAe;IAAA,IAAAC,MAAA;IAAA,OAAA3B,iBAAA;MAC/B,MAAM4B,cAAc,GAAGxC,QAAQ,GAAG,uBAAuB,GAAGsC,OAAO;MAEnE,MAAMxB,OAAO,GAAG,IAAIf,WAAW,CAAC;QAC9B,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAEwC,MAAI,CAAClC,WAAW,CAACU,cAAc,EAAE,CAACC,QAAQ,EAAE;QACvD,MAAM,EAAE;OACT,CAAC;MAEF,IAAIG,QAAQ,SAASoB,MAAI,CAACnC,IAAI,CAACqC,MAAM,CAAMD,cAAc,EAAE;QAAE1B,OAAO,EAAEA;MAAO,CAAE,CAAC,CAACO,SAAS,EAAE;MAC5F,MAAMkB,MAAI,CAAClC,WAAW,CAACiB,cAAc,CAACH,QAAQ,CAAC;IAAC;EAClD;EAEMuB,QAAQA,CAACJ,OAAe;IAAA,IAAAK,MAAA;IAAA,OAAA/B,iBAAA;MAC5B,MAAMgC,WAAW,GAAG5C,QAAQ,GAAG,sBAAsB,GAAGsC,OAAO;MAE/D,MAAMxB,OAAO,GAAG,IAAIf,WAAW,CAAC;QAC9B,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAE4C,MAAI,CAACtC,WAAW,CAACU,cAAc,EAAE,CAACC,QAAQ,EAAE;QACvD,MAAM,EAAE;OACT,CAAC;MAGF,IAAIG,QAAQ,SAASwB,MAAI,CAACvC,IAAI,CAACgB,IAAI,CAAMwB,WAAW,EAAE,EAAE,EAAE;QAAE9B,OAAO,EAAEA;MAAO,CAAE,CAAC,CAACO,SAAS,EAAE;MAE3F,MAAMsB,MAAI,CAACtC,WAAW,CAACiB,cAAc,CAACH,QAAQ,CAAC;IAAC;EAClD;EAAC,QAAA0B,CAAA,G;qBAhFU3C,WAAW,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXhD,WAAW;IAAAiD,OAAA,EAAXjD,WAAW,CAAAkD,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}