{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ahmad/M7011E_project_grupp11/library-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { BASE_URL } from 'src/utils/configs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.authService = inject(AuthService);\n    this.orderList = [];\n  }\n  getBookDetails(bookId) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const getBookDetailsUrl = BASE_URL + 'admin/book/details/' + bookId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this.http.get(getBookDetailsUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this.authService.handleResponse(response);\n      const bookDetails = {\n        id: response.result.book_id,\n        name: response.result.name,\n        author: response.result.author,\n        image: response.result.image !== undefined ? response.result.image : '',\n        description: response.result.description,\n        price: response.result.price,\n        stock: response.result.stock,\n        year: response.result.year,\n        language: response.result.language\n      };\n      return bookDetails;\n    })();\n  }\n  getCustomerDetails(customerId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const getCustomerDetailsUrl = BASE_URL + 'admin/customer/details/' + customerId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this2.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this2.http.get(getCustomerDetailsUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this2.authService.handleResponse(response);\n      const customerDetails = {\n        id: response.result.user_id,\n        name: response.result.name,\n        email: response.result.email\n      };\n      return customerDetails;\n    })();\n  }\n  getOrders() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      let getOrdersUrl = BASE_URL + 'admin/order/get/';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this3.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this3.http.get(getOrdersUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this3.authService.handleResponse(response);\n      _this3.orderList = [];\n      for (const order of response.result.order_list) {\n        let book = yield _this3.getBookDetails(order.book_id);\n        let customer = yield _this3.getCustomerDetails(order.customer_id);\n        _this3.orderList.push({\n          id: order.order_id,\n          book: book,\n          quantity: order.quantity,\n          customer: customer,\n          selected: false\n        });\n      }\n      return _this3.orderList;\n    })();\n  }\n  removeOrder(orderId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const removeOrderUrl = BASE_URL + 'admin/order/delete/' + orderId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this4.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this4.http.delete(removeOrderUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this4.authService.handleResponse(response);\n    })();\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","AuthService","HttpHeaders","BASE_URL","AdminService","constructor","http","authService","orderList","getBookDetails","bookId","_this","_asyncToGenerator","getBookDetailsUrl","headers","getAccessToken","toString","response","get","toPromise","handleResponse","bookDetails","id","result","book_id","name","author","image","undefined","description","price","stock","year","language","getCustomerDetails","customerId","_this2","getCustomerDetailsUrl","customerDetails","user_id","email","getOrders","_this3","getOrdersUrl","order","order_list","book","customer","customer_id","push","order_id","quantity","selected","removeOrder","orderId","_this4","removeOrderUrl","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ahmad\\M7011E_project_grupp11\\library-front\\src\\app\\services\\admin.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { AdminOrder, Book, Customer, Order } from '../interfaces/entities';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BASE_URL } from 'src/utils/configs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  authService: AuthService = inject(AuthService);\n  orderList: AdminOrder[] = []\n\n  constructor(private http: HttpClient) { }\n\n  async getBookDetails(bookId: number): Promise<Book> {\n    const getBookDetailsUrl = BASE_URL + 'admin/book/details/' + bookId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n    let response = await this.http.get<any>(getBookDetailsUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    const bookDetails: Book = {\n      id: response.result.book_id,\n      name: response.result.name,\n      author: response.result.author,\n      image: response.result.image !== undefined ? response.result.image : '',\n      description: response.result.description,\n      price: response.result.price,\n      stock: response.result.stock,\n      year: response.result.year,\n      language: response.result.language\n    };\n    return bookDetails;\n  }\n\n  async getCustomerDetails(customerId: number): Promise<Customer> {\n    const getCustomerDetailsUrl = BASE_URL + 'admin/customer/details/' + customerId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n    let response = await this.http.get<any>(getCustomerDetailsUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    const customerDetails: Customer = {\n      id: response.result.user_id,\n      name: response.result.name,\n      email: response.result.email\n    };\n    return customerDetails;\n  }\n\n  async getOrders(): Promise<AdminOrder[]> {\n    let getOrdersUrl = BASE_URL + 'admin/order/get/';\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n\n    let response = await this.http.get<any>(getOrdersUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    this.orderList = [];\n    for(const order of response.result.order_list)\n    {\n\n      let book: Book = await this.getBookDetails(order.book_id);\n      let customer: Customer = await this.getCustomerDetails(order.customer_id);\n      this.orderList.push({\n        id: order.order_id,\n        book: book,\n        quantity: order.quantity,\n        customer: customer,\n        selected: false\n      });\n      \n    }\n    return this.orderList;\n  }\n\n  async removeOrder(orderId: number): Promise<void> {\n    const removeOrderUrl = BASE_URL + 'admin/order/delete/' + orderId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n\n    let response = await this.http.delete<any>(removeOrderUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}