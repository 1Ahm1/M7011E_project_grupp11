{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ahmad/M7011E_project_grupp11/library-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject } from '@angular/core';\nimport { AuthService } from './auth.service';\nimport { BASE_URL } from 'src/utils/configs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.authService = inject(AuthService);\n    this.bookList = [];\n  }\n  getBooks() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const getBooksUrl = BASE_URL + 'manager/book/get/';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      const role = _this.authService.getRole();\n      let response = yield _this.http.get(getBooksUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this.authService.handleResponse(response);\n      _this.bookList = response.result.book_list.map(b => ({\n        id: b.book_id,\n        name: b.name,\n        author: b.author,\n        image: b.image,\n        price: b.price,\n        year: b.year,\n        language: b.language\n      }));\n      return _this.bookList;\n    })();\n  }\n  getBookDetails(bookId) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const getBookDetailsUrl = BASE_URL + 'manager/book/search/' + bookId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this2.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this2.http.get(getBookDetailsUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this2.authService.handleResponse(response);\n      const bookDetails = {\n        id: response.result.book_id,\n        name: response.result.name,\n        author: response.result.author,\n        image: response.result.image !== undefined ? response.result.image : '',\n        description: response.result.description,\n        price: response.result.price,\n        stock: response.result.stock,\n        year: response.result.year,\n        language: response.result.language\n      };\n      return bookDetails;\n    })();\n  }\n  createBook(name, author, stock, description, price, year, language) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const createBookUrl = BASE_URL + 'manager/book/create/';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this3.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      const requestBody = {\n        name: name,\n        author: author,\n        stock: stock,\n        description: description,\n        price: price,\n        year: year,\n        language: language\n      };\n      let response = yield _this3.http.post(createBookUrl, requestBody, {\n        headers: headers\n      }).toPromise();\n      yield _this3.authService.handleResponse(response);\n    })();\n  }\n  updateBook(bookId, name, author, stock, description, price, year, language) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const updateBookUrl = BASE_URL + 'manager/book/update/';\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this4.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      const requestBody = {\n        book_id: bookId,\n        name: name,\n        author: author,\n        stock: stock,\n        description: description,\n        price: price,\n        year: year,\n        language: language\n      };\n      let response = yield _this4.http.post(updateBookUrl, requestBody, {\n        headers: headers\n      }).toPromise();\n      yield _this4.authService.handleResponse(response);\n    })();\n  }\n  deleteBook(bookId) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const deleteBookUrl = BASE_URL + 'manager/book/delete/' + bookId;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'X-Token': _this5.authService.getAccessToken().toString(),\n        'lang': 'en'\n      });\n      let response = yield _this5.http.delete(deleteBookUrl, {\n        headers: headers\n      }).toPromise();\n      yield _this5.authService.handleResponse(response);\n    })();\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","AuthService","BASE_URL","HttpHeaders","BookService","constructor","http","authService","bookList","getBooks","_this","_asyncToGenerator","getBooksUrl","headers","getAccessToken","toString","role","getRole","response","get","toPromise","handleResponse","result","book_list","map","b","id","book_id","name","author","image","price","year","language","getBookDetails","bookId","_this2","getBookDetailsUrl","bookDetails","undefined","description","stock","createBook","_this3","createBookUrl","requestBody","post","updateBook","_this4","updateBookUrl","deleteBook","_this5","deleteBookUrl","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ahmad\\M7011E_project_grupp11\\library-front\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport {Book} from '../interfaces/entities'\nimport { AuthService } from './auth.service';\nimport { BASE_URL } from 'src/utils/configs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BookListResponse } from '../interfaces/responses';\nimport { CreateBookRequest, UpdateBookRequest } from '../interfaces/requests';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n\n  authService: AuthService = inject(AuthService);\n  constructor(private http: HttpClient) { }\n  bookList: Book[] = []\n\n  async getBooks(): Promise<Book[]> {\n    const getBooksUrl = BASE_URL + 'manager/book/get/';\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n\n    const role = this.authService.getRole();\n    let response = await this.http.get<any>(getBooksUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    this.bookList = response.result.book_list.map((b: BookListResponse) => ({\n      id: b.book_id,\n      name: b.name,\n      author: b.author,\n      image: b.image,\n      price: b.price,\n      year: b.year,\n      language: b.language\n    }));\n    \n    return this.bookList\n  }\n\n  async getBookDetails(bookId: number): Promise<Book> {\n    const getBookDetailsUrl = BASE_URL + 'manager/book/search/' + bookId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n    let response = await this.http.get<any>(getBookDetailsUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n    const bookDetails: Book = {\n      id: response.result.book_id,\n      name: response.result.name,\n      author: response.result.author,\n      image: response.result.image !== undefined ? response.result.image : '',\n      description: response.result.description,\n      price: response.result.price,\n      stock: response.result.stock,\n      year: response.result.year,\n      language: response.result.language\n    };\n    return bookDetails;\n  }\n\n  async createBook(name: String, author: String, stock: number, description: String, price: number, year: String, language: String): Promise<void> {\n    const createBookUrl = BASE_URL + 'manager/book/create/';\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n    const requestBody: CreateBookRequest = {\n      name: name,\n      author: author,\n      stock: stock,\n      description: description,\n      price: price,\n      year: year,\n      language: language\n    };\n\n    let response = await this.http.post<any>(createBookUrl, requestBody, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n\n  async updateBook(bookId: number, name: String, author: String, stock: number, description: String, price: number, year: String, language: String): Promise<void> {\n    const updateBookUrl = BASE_URL + 'manager/book/update/';\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n    const requestBody: UpdateBookRequest = {\n      book_id: bookId,\n      name: name,\n      author: author,\n      stock: stock,\n      description: description,\n      price: price,\n      year: year,\n      language: language\n    };\n\n    let response = await this.http.post<any>(updateBookUrl, requestBody, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n\n  async deleteBook(bookId: number): Promise<void> {\n    const deleteBookUrl = BASE_URL + 'manager/book/delete/' + bookId;\n    \n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Token': this.authService.getAccessToken().toString(),\n      'lang': 'en'\n    });\n    \n\n    let response = await this.http.delete<any>(deleteBookUrl, { headers: headers }).toPromise();\n    await this.authService.handleResponse(response);\n  }\n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}